/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.servidorp1r;

import com.github.snksoft.crc.CRC;
import com.mycompany.servidorp1r.Classes.Dispositivo;
import com.mycompany.servidorp1r.Classes.Mensaje;
import com.mycompany.servidorp1r.Classes.Puerto;
import com.mycompany.servidorp1r.Classes.Utils;
import com.mycompany.servidorp1r.JFrames.PuertosConectados;
import com.mycompany.servidorp1r.JFrames.TablaARP;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import javax.swing.JTextArea;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author waliray
 */
public class Home extends javax.swing.JFrame implements Runnable {

    private List<Dispositivo> dispositivos;
    private List<Puerto> puertosConectados;
    private String modo;
    private boolean buscandoDispositivo;
    private String macBuscar;
    private Mensaje paqueteAEnviar;
    private Utils utils;

    /**
     * Creates new form home
     */
    public Home() {
        initComponents();
        paqueteAEnviar = null;
        this.buscandoDispositivo = false;
        this.dispositivos = new ArrayList<>();
        this.puertosConectados = new ArrayList<>();
        this.modo = "Unicast";
        this.macBuscar = "";

        this.utils = new Utils();
        setAutoScroll();
        System.out.println("La ip es");
        System.out.println(this.utils.getIPAddress(true));
        //pruebaDispositivos();
        Thread hilo1 = new Thread(this);
        hilo1.start();
    }

    private void setAutoScroll() {
        JTextArea textArea = this.jTextArea1;
        DefaultCaret caret = (DefaultCaret) textArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    private void pruebaDispositivos() {
        this.dispositivos.add(new Dispositivo("2C:54:91:88:C9:E3", "192.168.0.1", "Cable", "Activo"));
        this.dispositivos.add(new Dispositivo("00:00:0A:BB:28:FC", "192.168.0.2", "Cable", "Activo"));
        this.dispositivos.add(new Dispositivo("11:00:0A:B2:17:CF", "192.168.0.3", "Cable", "Activo"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Tabla ARP");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Servidor");

        jButton4.setText("Ver cables conectados");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(46, 46, 46)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel4.setText("Acciones");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 74, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        TablaARP tabla = new TablaARP(this.dispositivos);
        tabla.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        PuertosConectados puertosConectados1 = new PuertosConectados(this.puertosConectados);
        puertosConectados1.setVisible(true);
        PuertosNoEstanTabla();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void pruebaCRC() {
        //Esto lo tenia el boton de prueba Solo es para realizar pruebas del CRC32
        //Prueba CRC

        String data = "123456789";
        long ccittCrc = CRC.calculateCRC(CRC.Parameters.CCITT, data.getBytes());
        System.out.printf("CRC is 0x%04X\n", ccittCrc); // prints "CRC is 0x29B1"
        System.out.println(ccittCrc);

        long prueba1 = CRC.calculateCRC(CRC.Parameters.CRC32, data.getBytes());
        System.out.printf("CRC32 is 0x%04X\n", prueba1); // prints "CRC is 0x29B1"
        System.out.println(prueba1);

        Checksum checksum = new CRC32();

        long asdf = 0;

        checksum.update(data.getBytes());
        System.out.println("CRC32 Checksum: " + checksum.getValue());
        long val = checksum.getValue();
        System.out.println("CRC32 long" + val);

    }

    private long calcularCRC(String msj) {
        Checksum checksum = new CRC32();
        checksum.update(msj.getBytes());

        long val = checksum.getValue();

        return val;
    }

    private void leerCRC(String msj, long crc) {
        long msjCRC = calcularCRC(msj);
        this.jTextArea1.append("\n El CRC32 es: " + crc);
        this.jTextArea1.append("\n El mensaje encriptado es: " + msjCRC);

        if (msjCRC == crc) {
            this.jTextArea1.append("\n El mensaje viene intacto");
        } else {
            this.jTextArea1.append("\n El mensaje esta corrompido se intentara reparalo");
            //TODO: tratar de repararlo
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        System.out.println("Hola estoy a la escucha");

        try {
            ServerSocket server = new ServerSocket(9999);
            Mensaje paqueteRecibido;

            while (true) {
                Socket socket = server.accept();

                /*
                InputStreamReader isr = new InputStreamReader(socket.getInputStream());
                BufferedReader br = new  BufferedReader(isr);
                System.out.println("Mensaje es: "+ br.readLine());
                 */
                ObjectInputStream stream = new ObjectInputStream(socket.getInputStream());

                paqueteRecibido = (Mensaje) stream.readObject();

                /*
                this.jTextArea1.append("\n" + " Envio a:" + paqueteRecibido.getMacAddressEnvio()
                        + "\n Recibido de: " + paqueteRecibido.getMacAddressRecibo()
                        + "\n Mensaje: " + paqueteRecibido.getMensaje()
                        + "\n Ip: " + paqueteRecibido.getIp());
                 */
                if (paqueteRecibido.getMensaje().equals("ConectarIPMAC")) {
                    mensajeRecibido(paqueteRecibido, "Conectar cable");
                    System.out.println("Conectar:" + paqueteRecibido.getIp() + " MAC : " + paqueteRecibido.getMacAddressEnvio());
                    ConectarDispositivo(paqueteRecibido.getIp(), paqueteRecibido.getMacAddressEnvio());
                    this.jTextArea1.append("\n Se ha conectado un dispositivo con ip: " + paqueteRecibido.getIp());
                } else if (paqueteRecibido.getMensaje().equals("DesconectarIPMAC")) {
                    mensajeRecibido(paqueteRecibido, "Desconectar cable");
                    System.out.println("Desconectar:" + paqueteRecibido.getIp() + " MAC : " + paqueteRecibido.getMacAddressEnvio());
                    DesconectarDispositivo(paqueteRecibido.getIp(), paqueteRecibido.getMacAddressEnvio());
                    this.jTextArea1.append("\n Se ha desconectado un dispositivo con ip: " + paqueteRecibido.getIp());
                } else if (paqueteRecibido.getMensaje().equals("SIESMIIPMAC")) {
                    mensajeRecibido(paqueteRecibido, "Confirmacion y reenvio de paquete");
                    //LLego el paquete de confirmacion del paquete que se tenia que enviar 
                    //Se guarda la ip con su mac en la tabla arp                    
                    //hay que asignar el dispositivo y enviarle el paquete
                    System.out.println("Agregando al dispositivo: " + paqueteRecibido.getIp() + " MAC : " + paqueteRecibido.getMacAddressEnvio());
                    this.jTextArea1.append("\nIniciando procedimiento de insercion de dispositivo con MAC " + paqueteRecibido.getMacAddressEnvio() + " a tabla ARP");
                    AgregarDispositivoTabla(paqueteRecibido.getIp(), paqueteRecibido.getMacAddressEnvio());
                    this.jTextArea1.append("\nAgregando el dispositivo con IP: " + paqueteRecibido.getIp() + " y MAC : " + paqueteRecibido.getMacAddressEnvio() + " a la Tabla ARP");
                    System.out.println("Enviando el paquete guardado");
                    this.jTextArea1.append("\n Reenviando el paquete al dispositivo con MAC: " + paqueteRecibido.getMacAddressEnvio() + "por el puerto con ip: " + paqueteRecibido.getIp());

                    Socket socketEnvio = new Socket(paqueteRecibido.getIp(), 9090);

                    ObjectOutputStream streamEnvio = new ObjectOutputStream(socketEnvio.getOutputStream());
                    streamEnvio.writeObject(this.paqueteAEnviar);
                    streamEnvio.close();
                    this.paqueteAEnviar = null;
                } else {
                    mensajeRecibido(paqueteRecibido, "Envio a otro equipo");
                    String macEnviar = paqueteRecibido.getMacAddressRecibo();
                    String macRecibido = paqueteRecibido.getMacAddressEnvio();

                    if (macEnviar.isEmpty()) {
                        //ERROR de envio: No se registro una direccion mac a enviar el mensaje
                        System.out.println("ERROR de envio: No se registro una direccion mac a enviar el mensaje");
                        this.jTextArea1.append("\n ERROR: No se registro una direccion mac a enviar el mensaje");

                        String ipEnviar = paqueteRecibido.getIp();
                        Socket socketEnvio = new Socket(ipEnviar, 9090);

                        Mensaje paqueteAResponder = new Mensaje("FFFF:FFFF:FFFF:FFFF",
                                macRecibido, "ERROR: No se registro una direccion mac a enviar el mensaje",
                                "10.10.20.1");
                        long crc2 = calcularCRC("ERROR: No se registro una direccion mac a enviar el mensaje");
                        paqueteAResponder.setCRC32(crc2);

                        ObjectOutputStream streamEnvio = new ObjectOutputStream(socketEnvio.getOutputStream());
                        streamEnvio.writeObject(paqueteAResponder);
                        streamEnvio.close();
                        System.out.println("Paquete enviado a" + ipEnviar);
                        this.jTextArea1.append("\nEnviando mensaje de error a:" + ": IP " + ipEnviar + " MAC " + macRecibido);

                    } else {
                        Dispositivo dispositivoRecibido = BuscarDispositivoPorMac(macRecibido);
                        if (dispositivoRecibido == null) {
                            //Insertar en la tabla ARP
                            this.jTextArea1.append("\nNo se encontro un dispositivo con MAC:" + macRecibido + " en la tabla ARP");
                            this.jTextArea1.append("\nIniciando procedimiento de insercion de dispositivo con MAC " + macRecibido + " a tabla ARP");
                            AgregarDispositivoTabla(paqueteRecibido.getIp(), macRecibido);
                            this.jTextArea1.append("\nAgregando el dispositivo con IP: " + paqueteRecibido.getIp() + " y MAC : " + macRecibido + " a la Tabla ARP");
                        }

                        Dispositivo dispositivoEnviar = BuscarDispositivoPorMac(macEnviar);
                        if (dispositivoEnviar == null) {
                            this.jTextArea1.append("\nNo se encontro un dispositivo con MAC:" + macEnviar + " en la tabla ARP");
                            List<Puerto> puertosABuscar = PuertosNoEstanTabla();

                            if (puertosABuscar.isEmpty()) {
                                // ERROR: Imposible de encontrar, no hay otro dispositivo conectado
                                String mensajeError = "ERROR: Imposible de encontrar, no hay otro dispositivo conectado";
                                this.jTextArea1.append("\n " + mensajeError);

                                String ipEnviar = paqueteRecibido.getIp();
                                Socket socketEnvio = new Socket(ipEnviar, 9090);

                                Mensaje paqueteAResponder = new Mensaje("FFFF:FFFF:FFFF:FFFF",
                                        macRecibido, mensajeError,
                                        "10.10.20.1");
                                long crc2 = calcularCRC(mensajeError);
                                paqueteAResponder.setCRC32(crc2);

                                ObjectOutputStream streamEnvio = new ObjectOutputStream(socketEnvio.getOutputStream());
                                streamEnvio.writeObject(paqueteAResponder);
                                streamEnvio.close();
                                System.out.println("Paquete enviado a" + ipEnviar);
                                this.jTextArea1.append("\nEnviando mensaje de error a:" + ": IP " + ipEnviar + " MAC " + macRecibido);
                            } else {
                                this.jTextArea1.append("\nIniciando procedimiento broadcast para encontrar el dispositivo");
                                //Realizar el envio broadcast a todos los dispositivos que no esten en la tabla ARP
                                this.macBuscar = macEnviar;
                                this.paqueteAEnviar = paqueteRecibido;

                                if (puertosABuscar.isEmpty() == false) {
                                    this.jTextArea1.append("\nPuertos que aun no estan guardados en tabla con su respectiva mac:");
                                    int i = 0;
                                    for (Puerto puerto : puertosABuscar) {
                                        this.jTextArea1.append("\n Puerto" + i + ": IP " + puerto.getIp() + " MAC " + puerto.getMac());
                                        i += 1;
                                    }
                                }
                                try {
                                    for (Puerto puertoBuscar : puertosABuscar) {
                                        //Creamos un paquete mensaje que donde el cliente correspondiente devuelva una respuesta 
                                        Mensaje paqueteAResponder = new Mensaje("FFFF:FFFF:FFFF:FFFF",
                                                this.macBuscar, "ESTUIPMAC",
                                                "10.10.20.1");
                                        long crc1 = calcularCRC("ESTUIPMAC");
                                        paqueteAResponder.setCRC32(crc1);

                                        Socket socketEnvio = new Socket(puertoBuscar.getIp(), 9090);

                                        ObjectOutputStream streamEnvio = new ObjectOutputStream(socketEnvio.getOutputStream());
                                        streamEnvio.writeObject(paqueteAResponder);
                                        streamEnvio.close();
                                        System.out.println("Paquete enviado a " + puertoBuscar.getIp());
                                        this.jTextArea1.append("\n Enviando mensaje broadcast a: " + ": IP " + puertoBuscar.getIp() + " MAC " + puertoBuscar.getMac());
                                    }
                                } catch (Exception e) {

                                }
                            }
                        } else {
                            if (dispositivoEnviar.getEstado().equals("Conectado")) {
                                //Envia el paquete al dispositivo que ya tiene en la lista
                                this.jTextArea1.append("\nDispositivo se encuentra en la tabla ARP:");

                                String ipEnviar = dispositivoEnviar.getIpAddress();
                                Socket socketEnvio = new Socket(ipEnviar, 9090);

                                ObjectOutputStream streamEnvio = new ObjectOutputStream(socketEnvio.getOutputStream());
                                streamEnvio.writeObject(paqueteRecibido);
                                streamEnvio.close();
                                System.out.println("Paquete enviado a" + ipEnviar);
                                this.jTextArea1.append("\nEnviando paquete recibido a:" + ": IP " + ipEnviar + " MAC " + dispositivoEnviar.getMacAddress());
                            } else {
                                // Enviar un mensaje que el dispositivo fue desconectado
                                this.jTextArea1.append("\n ERROR: El dispositivo al que se quiere enviar el paquete esta desconectado");
                                String ipEnviar = paqueteRecibido.getIp();
                                Socket socketEnvio = new Socket(ipEnviar, 9090);

                                Mensaje paqueteAResponder = new Mensaje("FFFF:FFFF:FFFF:FFFF",
                                        macRecibido, "ERROR: El dispositivo al que se quiere enviar el paquete esta desconectado",
                                        "10.10.20.1");
                                long crc2 = calcularCRC("ERROR: El dispositivo al que se quiere enviar el paquete esta desconectado");
                                paqueteAResponder.setCRC32(crc2);

                                ObjectOutputStream streamEnvio = new ObjectOutputStream(socketEnvio.getOutputStream());
                                streamEnvio.writeObject(paqueteAResponder);
                                streamEnvio.close();
                                System.out.println("Paquete enviado a" + ipEnviar);
                                this.jTextArea1.append("\nEnviando mensaje de error a:" + ": IP " + ipEnviar + " MAC " + macRecibido);
                            }

                        }

                    }

                }

                socket.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void mensajeRecibido(Mensaje mensaje, String tipo) {
        this.jTextArea1.append("\n \n Se recibio un paquete: ");
        this.jTextArea1.append("\n Desempaquetando...");
        leerCRC(mensaje.getMensaje(), mensaje.getCRC32());
        this.jTextArea1.append("\n Tipo de mensaje: " + tipo);
        if (tipo.equals("Conectar cable")) {

        } else if (tipo.equals("Desconectar cable")) {

        } else if (tipo.equals("Confirmacion y reenvio de paquete")) {

        } else if (tipo.equals("Envio a otro equipo")) {

        }
    }

    private void ConectarDispositivo(String ip, String mac) {
        //Aqui se guardan las ips simulando los puertos que estan conectados a un switch
        boolean existe = false;
        
        for (Puerto puerto : this.puertosConectados) {
            if (puerto.getIp().equals(ip) && puerto.getMac().equals(mac)) {
                existe = true;
                break;
            }            
        }
        

        for (Dispositivo dispositivo : dispositivos) {
            if (dispositivo.getIpAddress().equals(ip) && dispositivo.getMacAddress().equals(mac)) {
                //dispositivos.remove(i);
                dispositivo.setEstado("Conectado");                
                break;
            }
        }

        if (existe == false) {
            Puerto puerto = new Puerto(ip, mac, "No asignado");
            this.puertosConectados.add(puerto);
        }
    }

    private void DesconectarDispositivo(String ip, String mac) {
        int i = 0;

        for (Dispositivo dispositivo : dispositivos) {
            if (dispositivo.getIpAddress().equals(ip) && dispositivo.getMacAddress().equals(mac)) {
                //dispositivos.remove(i);
                dispositivo.setEstado("Desconectado");
                break;
            }
            i += 1;
        }
        i = 0;
        for (Puerto puerto : this.puertosConectados) {
            if (puerto.getIp().equals(ip) && puerto.getMac().equals(mac)) {
                this.puertosConectados.remove(i);
                break;
            }
            i += 1;
        }

    }

    private List<Puerto> PuertosNoEstanTabla() {
        List<Puerto> puertosNoEnTabla = new ArrayList<>();

        for (Puerto puertoConectado : this.puertosConectados) {
            if (puertoConectado.getEstado().equals("No asignado")) {
                puertosNoEnTabla.add(puertoConectado);
            }
        }

        System.out.println("Puertos no en tabla: " + puertosNoEnTabla);

        return puertosNoEnTabla;
    }

    private void AgregarDispositivoTabla(String ip, String mac) {
        Dispositivo dispositivoCambiar = null;
        for (Dispositivo dispositivo : dispositivos) {
            if (dispositivo.getIpAddress().equals(ip) && dispositivo.getMacAddress().equals(mac)) {
                dispositivoCambiar = dispositivo;
            }
        }

        if (dispositivoCambiar == null) {
            this.dispositivos.add(new Dispositivo(mac, ip, "Cable", "Conectado"));
        } else {
            dispositivoCambiar.setEstado("Activo");
        }

        AgregarPuertoATabla(ip, mac);
    }

    private void AgregarPuertoATabla(String ip, String mac) {
        for (Puerto puertoConectado : this.puertosConectados) {
            if (puertoConectado.getIp().equals(ip) && puertoConectado.getMac().equals(mac)) {
                puertoConectado.setEstado("Asignado");
                break;
            }
        }
    }

    private void DesactivarDispositivo(String ip, String mac) {
        Dispositivo dispositivoCambiar = null;
        for (Dispositivo dispositivo : dispositivos) {
            if (dispositivo.getIpAddress().equals(ip) && dispositivo.getMacAddress().equals(mac)) {
                dispositivoCambiar = dispositivo;
            }
        }

        if (dispositivoCambiar == null) {
            this.dispositivos.add(new Dispositivo(mac, ip, "Cable", "Inactivo"));
        } else {
            dispositivoCambiar.setEstado("Inactivo");
        }
    }

    private Dispositivo BuscarDispositivoPorMac(String mac) {
        for (Dispositivo dispositivo : dispositivos) {
            if (dispositivo.getMacAddress().equals(mac)) {
                return dispositivo;
            }
        }
        return null;
    }
}
